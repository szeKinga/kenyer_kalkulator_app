import streamlit as st
import json
from datetime import datetime
import os

from supabase import create_client, Client

# Supabase init
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_KEY = st.secrets["SUPABASE_KEY"]

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- F√°jlnevek ---
DATA_FILE = "data.json"
SAVINGS_FILE = "savings.json"

def save_total_saving(total_saving_data):
    with open(SAVINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(total_saving_data, f, ensure_ascii=False, indent=2)

def load_total_saving():
    if not os.path.exists(SAVINGS_FILE):
        data = {
            "total_saving": 0.0,
            "first_calculation": datetime.now().strftime("%Y-%m-%d"),
            "by_category": {
                "√âlelmiszer": 0.0,
                "Haszn√°lt cikkek": 0.0,
                "K√∂nyvt√°r": 0.0
            }
        }
        save_total_saving(data)
        return data
    else:
        with open(SAVINGS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data

if "total_data" not in st.session_state:
    st.session_state.total_data = load_total_saving()

total_data = st.session_state.total_data

st.set_page_config(page_title="Keny√©r Kalkul√°tor", page_icon="üçû")

# --- Adatok bet√∂lt√©se ---
def load_data():
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)

# --- Streamlit oldalbe√°ll√≠t√°s ---
st.title("Legy√©l mindig tudatos!")
st.markdown(
    """
    N√©zd meg mennyit sp√≥rolsz! Az app haszn√°lat√°val k√∂nnyen ki tudod sz√°molni, hogy ha szak√≠tasz a p√©ks√©ggel, bolti r√°gcsikkal √©s √©dess√©gekkel, mennyi p√©nz marad a zsebedben.

    """
)

show_more = st.toggle("Tov√°bb olvasom üëÄ")

if show_more:
    st.markdown("""

    A homemade szeml√©lettel k√≠m√©lj√ºk a p√©nzt√°rc√°nkat, ez egy vizu√°lis motiv√°ci√≥ tud lenni. Azzal a keny√©rrel, amit √©n mostan√°ban s√ºtni szoktam, kb. 400 Ft-ot takar√≠tok meg √©s m√©g √∂sszetev≈ëit tekintve is sokkal ink√°bb kedvemre val√≥. Az is kider√ºlt, hogy a t√©szt√°t bekeverni pont annyi id≈ë, am√≠g kiv√°rom a sort a p√©ks√©gben, a t√∂bbit m√°r int√©zi a dagaszt√≥ g√©p √©s a s√ºt≈ë. A homemade √©letm√≥d k√≠v√°n n√©mi √°tgondolts√°got √©s tudatoss√°got, ig√©nyel tervez√©st, de ha megvan a kell≈ë motiv√°ci√≥, akkor hozz√° lehet szokni.

    A p√©nzt√°rc√°nk k√≠m√©l√©se mellett engedj√ºk, hogy a homemade szeml√©let v√©gezze a dolg√°t:

     - k√≠s√©rletezz√ºnk alternativ, a szervezetet kev√©sb√© terhel≈ë √∂sszetev≈ëkkel

     - ne kergess√ºnk hi√∫ √°br√°ndokat, sokkal t√∂bbet fogunk √°llni a konyh√°ban, DE be lehet vonni a gyerekeket, k√≠v√°l√≥ k√∂z√∂s program √©s hasznos lehet, ha azt l√°tj√°k, hogy nem mindent a boltban vesz√ºnk meg
     
     - ha a szervezet√ºnk tehermentes√≠tve van, akkor jobban van energi√°ja a betegs√©geknek ellen√°llni
     
     - ritk√°bban vagyunk betegek, kevesebb gy√≥gyszert kell alkalmaznunk, ezzel megint csak sp√≥rolunk
     
     - ha cs√∂kken a gy√≥gyszerbevitel, akkor az el≈ë√°ll√≠t√°s ritmus√°nak is lassulnia kell, teh√°t cs√∂kken a gy√°rak k√°rosanyag kibocs√°t√°sa
     
     - ez√°ltal javul a leveg≈ë min≈ës√©g, lelassul a glob√°lis felmeleged√©s, javul az √©letmin≈ës√©g

    A homemade szeml√©let sz√°mos el≈ënnyel b√≠r, a j√≥ h√≠r az, hogy am√≠g a lomha √©s hossz√∫ t√°von kimutathat√≥ pozit√≠vumok be√©rnek, addig is tudjuk a megtakar√≠t√°sunkat sz√°molni üòä
                
    Legy√©l mindig tudatos!

    """
)



# --- Session State inicializ√°l√°s ---
if "quantities" not in st.session_state:
    st.session_state.quantities = {}

if "calculated" not in st.session_state:
    st.session_state.calculated = False

if "homemade_cost" not in st.session_state:
    st.session_state.homemade_cost = 0.0

if "saving" not in st.session_state:
    st.session_state.saving = 0.0

# --- JSON bet√∂lt√©se ---
def load_data():
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)

data = load_data()

# --- 1. Kateg√≥ria kiv√°laszt√°sa ---

st.header("1. Bolti term√©k kiv√°laszt√°sa")

bread_options = data["store_bread_types"] + ["Egy√©b"]
selected_product = st.selectbox("V√°lassz egy bolti term√©kt√≠pust:", bread_options)

if selected_product == "Egy√©b":
    selected_product = st.text_input("Add meg a term√©k t√≠pus√°t:", value="Ismeretlen keny√©r")

store_price_input = st.text_input(f"Add meg a(z) {selected_product} bolti √°r√°t (Ft):", value="")
store_price = float(store_price_input) if store_price_input else 0.0

st.header("2. Alapanyagok kiv√°laszt√°sa")

all_ingredients = {}
for category in data["ingredients"].values():
    all_ingredients.update(category)

ingredient_options = list(all_ingredients.keys()) + ["Egy√©b"]
selected_ingredient = st.selectbox("V√°lassz alapanyagot:", ingredient_options)

# Kateg√≥ria azonos√≠t√°sa a kiv√°lasztott alapanyag alapj√°n
selected_category = None
for category_name, ingredients_dict in data["ingredients"].items():
    if selected_ingredient in ingredients_dict:
        selected_category = category_name
        break


if selected_ingredient == "Egy√©b":
    custom_ingredient_name = st.text_input("Add meg az √∫j alapanyag nev√©t:")
    custom_price_per_unit = st.number_input("Add meg az √∫j alapanyag √°r√°t (Ft egys√©genk√©nt):", min_value=0.0, step=1.0)
    custom_unit = st.text_input("Add meg az √∫j alapanyag m√©rt√©kegys√©g√©t (pl. g, db, dl):", value="g")
else:
    custom_ingredient_name = selected_ingredient
    custom_price_per_unit = data["ingredients"][selected_category][selected_ingredient]["price_per_unit"]
    custom_unit = data["ingredients"][selected_category][selected_ingredient]["unit"]

quantity_input = st.text_input(
    f"Add meg a(z) {selected_ingredient} mennyis√©g√©t ({custom_unit}):",
    value="",
    key=f"quantity_input_{selected_ingredient}"
)

quantity = float(quantity_input) if quantity_input else 0.0

if st.button("‚ûï Hozz√°ad√°s az alapanyagokhoz"):
    if custom_ingredient_name and quantity > 0:
        st.session_state.quantities[custom_ingredient_name] = (quantity, custom_price_per_unit, custom_unit)
        st.success(f"{custom_ingredient_name} hozz√°adva a list√°hoz!")

# --- Kalkul√°ci√≥ csak √©lelmiszer eset√©n ---
    st.header("3. Kalkul√°ci√≥")

    if st.session_state.quantities:
        st.subheader("Eddigi alapanyagok:")
        for name, (qty, price_per_unit, unit) in st.session_state.quantities.items():
            st.write(f"- {name}: {qty} {unit} (egys√©g√°r: {price_per_unit:.2f} Ft/{unit})")

        if st.button("üìä Kalkul√°l√°s"):
            homemade_cost = 0
            for name, (qty, price_per_unit, unit) in st.session_state.quantities.items():
                homemade_cost += price_per_unit * qty
            
            saving = store_price - homemade_cost

            st.session_state.homemade_cost = homemade_cost
            st.session_state.saving = saving
            st.session_state.calculated = True

            # Ment√©s k√∂zvetlen√ºl kalkul√°ci√≥ ut√°n
            st.session_state.total_data["total_saving"] += saving
            st.session_state.total_data["by_category"]["√âlelmiszer"] += saving
            save_total_saving(st.session_state.total_data)

        if st.session_state.calculated:
            st.write(f"- H√°zi k√©sz√≠t√©s k√∂lts√©ge: **{st.session_state.homemade_cost:.2f} Ft**")
            st.write(f"- Megtakar√≠t√°s: **{st.session_state.saving:.2f} Ft**")
            
            if st.button("üîÑ √öj kalkul√°ci√≥ ind√≠t√°sa"):
                st.session_state.quantities = {}
                st.session_state.calculated = False
                st.rerun()

        else:
            st.info("Adj hozz√° legal√°bb egy alapanyagot a kalkul√°ci√≥hoz.")

st.markdown("---")
st.subheader("üí∞ √ñsszes√≠tett megtakar√≠t√°sod")

total_data = load_total_saving()
st.write(f"Els≈ë kalkul√°ci√≥ d√°tuma: {total_data.get('first_calculation', 'N/A')}")
st.write(f"Megtakar√≠t√°s: **{total_data['total_saving']:.2f} Ft**")
