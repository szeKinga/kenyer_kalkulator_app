import streamlit as st
import json
from datetime import datetime
import os

from supabase import create_client, Client

st.set_page_config(page_title="Keny√©r Kalkul√°tor", page_icon="üçû")

# Supabase init
SUPABASE_URL = st.secrets["SUPABASE_URL"]
SUPABASE_KEY = st.secrets["SUPABASE_KEY"]

supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- F√°jlnevek ---
DATA_FILE = "data.json"
SAVINGS_FILE = "savings.json"

def save_total_saving(total_saving_data):
    with open(SAVINGS_FILE, "w", encoding="utf-8") as f:
        json.dump(total_saving_data, f, ensure_ascii=False, indent=2)

def load_total_saving():
    if not os.path.exists(SAVINGS_FILE):
        data = {
            "total_saving": 0.0,
            "first_calculation": datetime.now().strftime("%Y-%m-%d"),
            "by_category": {
                "√âlelmiszer": 0.0,
            },
            "transport_choices": {
                "total_distance_m": 0,
                "total_count": 0
            }
        }
        save_total_saving(data)
        return data
    else:
        with open(SAVINGS_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
        
        if "total_saving" not in data:
            data["total_saving"] = 0.0

        if "first_calculation" not in data:
            data["first_calculation"] = datetime.now().strftime("%Y-%m-%d")
        
        if "by_category" not in data:
            data["by_category"] = {"√âlelmiszer": 0.0}
        elif "√âlelmiszer" not in data["by_category"]:
            data["by_category"]["√âlelmiszer"] = 0.0

        if "transport_choices" not in data:
            data["transport_choices"] = {
                "total_distance_m": 0,
                "total_count": 0
            }
        save_total_saving(data)
        return data

if "total_data" not in st.session_state:
    st.session_state.total_data = load_total_saving()

total_data = st.session_state.total_data

# --- Streamlit oldalbe√°ll√≠t√°s ---
st.title("Legy√©l mindig tudatos!")
st.markdown(
    """
    √údv√∂z√∂llek a Legy√©l mindig tudatos! appban, az alkalmaz√°snak 3 f≈ë mozgat√≥rug√≥ja van, t√°pl√°lkozzunk eg√©szs√©gesebben, cs√∂kkents√ºk a k√∂rnyezet√ºnk terhel√©s√©t √©s sp√≥roljunk.
    
    J√°tszunk a sz√°mokkal, n√©zd meg mennyit sp√≥rolsz! Az app haszn√°lat√°val k√∂nnyen ki tudod sz√°molni, hogy ha szak√≠tasz a p√©ks√©ggel, bolti r√°gcsikkal √©s √©dess√©gekkel, mennyi p√©nz marad a zsebedben, amelett, hogy megvonod magadt√≥l a felesleges k√°ros √©lelmiszer√∂sszetev≈ëket.

    """
)

show_more = st.toggle("Tov√°bb olvasom üëÄ")

if show_more:
    st.markdown("""

    A homemade szeml√©lettel k√≠m√©lj√ºk a p√©nzt√°rc√°nkat, ez egy vizu√°lis motiv√°ci√≥ tud lenni. Azzal a keny√©rrel, amit √©n mostan√°ban s√ºtni szoktam, kb. 400 Ft-ot takar√≠tok meg √©s m√©g √∂sszetev≈ëit tekintve is sokkal ink√°bb kedvemre val√≥. Az is kider√ºlt, hogy a t√©szt√°t bekeverni pont annyi id≈ë, am√≠g kiv√°rom a sort a p√©ks√©gben, a t√∂bbit m√°r int√©zi a dagaszt√≥ g√©p √©s a s√ºt≈ë. A homemade √©letm√≥d k√≠v√°n n√©mi √°tgondolts√°got √©s tudatoss√°got, ig√©nyel tervez√©st, de ha megvan a kell≈ë motiv√°ci√≥, akkor hozz√° lehet szokni.

    A p√©nzt√°rc√°nk k√≠m√©l√©se mellett engedj√ºk, hogy a homemade szeml√©let v√©gezze a dolg√°t:

     - k√≠s√©rletezz√ºnk alternativ, a szervezetet kev√©sb√© terhel≈ë √∂sszetev≈ëkkel

     - ne kergess√ºnk hi√∫ √°br√°ndokat, val√≥ban t√∂bb id≈ët fogunk a konyh√°ban t√∂lteni, DE be lehet vonni a gyerekeket, k√≠v√°l√≥ k√∂z√∂s program √©s hasznos lehet, ha azt l√°tj√°k, hogy nem mindent a boltban, k√©szen vesz√ºnk meg
     
     - ha a szervezet√ºnk tehermentes√≠tve van, akkor jobban van energi√°ja a betegs√©geknek ellen√°llni
     
     - ritk√°bban vagyunk betegek, kevesebb gy√≥gyszert kell alkalmaznunk, ezzel megint csak sp√≥rolunk
     
     - ha cs√∂kken a gy√≥gyszerbevitel, akkor az el≈ë√°ll√≠t√°s ritmus√°nak is lassulnia kell, teh√°t cs√∂kken a gy√°rak k√°rosanyag kibocs√°t√°sa
     
     - ez√°ltal javul a leveg≈ë min≈ës√©g, lelassul a glob√°lis felmeleged√©s, javul az √©letmin≈ës√©g

    A homemade szeml√©let sz√°mos el≈ënnyel b√≠r, a j√≥ h√≠r az, hogy am√≠g a lomha √©s hossz√∫ t√°von kimutathat√≥ pozit√≠vumok be√©rnek, addig is tudjuk a megtakar√≠t√°sunkat sz√°molni üòä
    
    Ez a szeml√©let ihlette az alkalmaz√°st, de egy kicsit tov√°bb gondoltam, kib≈ëv√≠tettem egy m√°sodik blokkal, ami azt sz√°molja, hogy ha az aut√≥t gyalogl√°sra vagy ker√©kp√°rra cser√©lj√ºk, a megadott t√°v megt√©tel√©vel h√°ny gramm sz√©ndioxidt√≥l vontad meg a bolyg√≥t, mennyi √ºzemanyag k√∂lts√©get sp√≥rolt√°l meg magadnak, √©s mennyi kal√≥ri√°t √©gett√©l el ezzel a remek d√∂nt√©ssel üòä
    
    J√°tszunk el a gondolattal, egy h√©ten h√°nyszor ad√≥dik olyan alkalom, hogy el kell ugranod gyorsan valahova (elfogyott a tejf√∂l, meg√©rkezett a az automat√°ba a csomag, ...)?! Ha heti 3-szor teszel meg alkalmank√©nt 2 km-t gyalog vagy biciklivel, az √©ves szinten 260 km. Az app seg√≠ts√©g√©vel k√∂nnyen ki tudod sz√°molni, ezzel mennyi √ºzemanyagk√∂lts√©get sp√≥rolt√°l meg √©s h√°ny gramm CO‚ÇÇ-t≈ël k√≠m√©led meg a leveg≈ët. √âs ez csak TE vagy, rajtad k√≠v√ºl √©l m√©g 8 milli√°rd ember a F√∂ld√∂n...
    
    Vigy√°zat, mert a homemade magatart√°s √©s a mozg√°s f√ºgg≈ës√©get okoz! üòä
                
    Legy√©l mindig tudatos!

    """
)


# --- Session State inicializ√°l√°s ---
if "quantities" not in st.session_state:
    st.session_state.quantities = {}

if "calculated" not in st.session_state:
    st.session_state.calculated = False

if "homemade_cost" not in st.session_state:
    st.session_state.homemade_cost = 0.0

if "saving" not in st.session_state:
    st.session_state.saving = 0.0

# --- JSON bet√∂lt√©se ---
def load_data():
    with open("data.json", "r", encoding="utf-8") as f:
        return json.load(f)

data = load_data()

# --- 1. Kateg√≥ria kiv√°laszt√°sa ---

st.header("1. Bolti term√©k kiv√°laszt√°sa")

bread_options = data["store_bread_types"] + ["Egy√©b"]
selected_product = st.selectbox("V√°lassz egy bolti term√©kt√≠pust:", bread_options)

if selected_product == "Egy√©b":
    selected_product = st.text_input("Add meg a term√©k t√≠pus√°t:", value="Ismeretlen keny√©r")

store_price_input = st.text_input(f"Add meg a(z) {selected_product} bolti √°r√°t (Ft):", value="")
store_price = float(store_price_input) if store_price_input else 0.0

st.header("2. Alapanyagok kiv√°laszt√°sa")

# 1. Kateg√≥riav√°laszt√≥ leg√∂rd√ºl≈ë
ingredient_categories = list(data["ingredients"].keys())
selected_category = st.selectbox("V√°lassz alapanyag kateg√≥ri√°t:", ingredient_categories)

# 2. Alapanyagv√°laszt√≥ leg√∂rd√ºl≈ë a kiv√°lasztott kateg√≥ria alapj√°n
ingredient_options = list(data["ingredients"][selected_category].keys()) + ["Egy√©b"]
selected_ingredient = st.selectbox("V√°lassz alapanyagot:", ingredient_options)


# Kateg√≥ria azonos√≠t√°sa a kiv√°lasztott alapanyag alapj√°n

if selected_ingredient == "Egy√©b":
    custom_ingredient_name = st.text_input("Add meg az √∫j alapanyag nev√©t:")
    custom_price_per_unit = st.number_input("Add meg az √∫j alapanyag √°r√°t (Ft egys√©genk√©nt):", min_value=0.0, step=1.0)
    custom_unit = st.text_input("Add meg az √∫j alapanyag m√©rt√©kegys√©g√©t (pl. g, db, dl):", value="g")
else:
    custom_ingredient_name = selected_ingredient

    if selected_category in data["ingredients"] and selected_ingredient in data["ingredients"][selected_category]:
        custom_price_per_unit = data["ingredients"][selected_category][selected_ingredient]["price_per_unit"]
        custom_unit = data["ingredients"][selected_category][selected_ingredient]["unit"]
    else:
        custom_price_per_unit = st.number_input(
            f"Add meg a(z) {selected_ingredient} √°r√°t (Ft egys√©genk√©nt):", min_value=0.0, step=1.0, key=f"custom_price_{selected_ingredient}"
        )
        custom_unit = st.text_input(
            f"Add meg a(z) {selected_ingredient} m√©rt√©kegys√©g√©t (pl. g, db, dl):", value="g", key=f"custom_unit_{selected_ingredient}"
        )

quantity_input = st.text_input(
    f"Add meg a(z) {selected_ingredient} mennyis√©g√©t ({custom_unit}):",
    value="",
    key=f"quantity_input_{selected_ingredient}"
)

quantity = float(quantity_input) if quantity_input else 0.0

if st.button("‚ûï Hozz√°ad√°s az alapanyagokhoz"):
    if custom_ingredient_name and quantity > 0:
        st.session_state.quantities[custom_ingredient_name] = (quantity, custom_price_per_unit, custom_unit)
        st.success(f"{custom_ingredient_name} hozz√°adva a list√°hoz!")

# --- Kalkul√°ci√≥ csak √©lelmiszer eset√©n ---
st.header("3. Kalkul√°ci√≥")

if st.session_state.quantities:
    st.subheader("Eddigi alapanyagok:")
    for name, (qty, price_per_unit, unit) in st.session_state.quantities.items():
        material_cost = price_per_unit * qty
        st.write(
            f"- {name}: {qty} {unit} "
            f"(egys√©g√°r: {price_per_unit:.2f} Ft/{unit}), "
            f"anyagk√∂lts√©g: {material_cost:.2f} Ft"
        )

    if st.button("üìä Kalkul√°l√°s"):
        homemade_cost = 0
        for name, (qty, price_per_unit, unit) in st.session_state.quantities.items():
            homemade_cost += price_per_unit * qty
            
        saving = store_price - homemade_cost

        st.session_state.homemade_cost = homemade_cost
        st.session_state.saving = saving
        st.session_state.calculated = True

        # Ment√©s k√∂zvetlen√ºl kalkul√°ci√≥ ut√°n
        st.session_state.total_data["total_saving"] += saving
        st.session_state.total_data["by_category"]["√âlelmiszer"] += saving
        save_total_saving(st.session_state.total_data)

    if st.session_state.calculated:
        st.write(f"- H√°zi k√©sz√≠t√©s k√∂lts√©ge: **{st.session_state.homemade_cost:.2f} Ft**")
        st.write(f"- Megtakar√≠t√°s: **{st.session_state.saving:.2f} Ft**")
            
        if st.button("üîÑ √öj kalkul√°ci√≥ ind√≠t√°sa"):
            st.session_state.quantities = {}
            st.session_state.calculated = False
            st.rerun()

    else:
        st.info("Adj hozz√° legal√°bb egy alapanyagot a kalkul√°ci√≥hoz.")

st.markdown("---")
st.subheader("üí∞ √ñsszes√≠tett megtakar√≠t√°sod")

total_data = load_total_saving()
st.write(f"Els≈ë kalkul√°ci√≥ d√°tuma: {total_data.get('first_calculation', 'N/A')}")
st.write(f"Megtakar√≠t√°s: **{int(round(total_data['total_saving']))} Ft**")

st.markdown("---")
st.markdown("<h2 style='font-size: 36px;'>Tudatos k√∂zleked√©si d√∂nt√©seid</h2>", unsafe_allow_html=True)

import streamlit as st
import json

# P√©lda adatszerkezet, val√≥s√°gban bet√∂lt√©s √©s ment√©s is kell
total_data = {
    "transport_choices": {
        "total_distance_m": 0,
        "total_count": 0,
        "co2_saved": {},
        "burned_calories_walk": 0.0,
        "burned_calories_bike":0.0
    }
}

CO2_VALUES = {
    "Benzines": 215,
    "D√≠zel": 180,
    "Elektromos": 75
}

FUEL_COSTS = {
    "Benzines": {"consumption_l_per_100km": 7.0, "price_per_l": 620},
    "D√≠zel": {"consumption_l_per_100km": 5.5, "price_per_l": 650},
    "Elektromos": {"consumption_kWh_per_100km": 18.0, "price_per_kWh": 100}
}

# --- Beviteli mez≈ëk ---
st.subheader("üö∂‚Äç‚ôÇÔ∏è K√∂zleked√©si adatok megad√°sa")

transport_type = st.selectbox(
    "Milyen m√≥don k√∂zlekedt√©l az aut√≥ helyett?",
    options=["Gyalogl√°s", "Bicikliz√©s"],
    key="transport_type"
)

transport_choice = st.selectbox(
    "Milyen j√°rm≈±vet cser√©lted le a k√∂rnyezetk√≠m√©l≈ë k√∂zleked√©sre?",
    options=["Benzines", "D√≠zel", "Elektromos"],
    key="transport_choice"
)

transport_count = st.number_input(
    "H√°nyszor v√°lasztottad ma az aut√≥ helyett a s√©t√°t/bicikliz√©st?",
    min_value=0,
    step=1,
    key="transport_count_input"
)

transport_distance = st.number_input(
    "Ha volt k√∂zte s√©ta vagy bicikliz√©s, h√°ny m√©tert tett√©l meg √≠gy?",
    min_value=0,
    step=100,
    key="transport_distance_input"
)

# --- S√∫lymegad√°s (EZ KER√úL LEGEL≈êRE!) ---
st.subheader("‚öñÔ∏è Kal√≥ria kalkul√°tor (opcion√°lis)")
wants_to_add_weight = st.radio("Szeretn√©l tests√∫lyt megadni a kal√≥ria kalkul√°ci√≥hoz?", ["Nem", "Igen"])

if wants_to_add_weight == "Igen":
    user_weight = st.number_input("Add meg a tests√∫lyodat (kg):", min_value=20.0, max_value=300.0, value=70.0, step=0.5)
else:
    user_weight = 70.0
    st.info("Nem adt√°l meg tests√∫lyt, az alap√©rtelmezett 70 kg-al sz√°molunk.")

# --- √ñsszes√≠tett adatbet√∂lt√©s ---
if os.path.exists("savings.json"):
    with open("savings.json", "r", encoding="utf-8") as f:
        total_data = json.load(f)
else:
    total_data = {}

# Biztos√≠tjuk az elv√°rt adatstrukt√∫r√°t, ha hi√°nyzik valami
total_data.setdefault("transport_choices", {})
total_data["transport_choices"].setdefault("total_distance_m", 0)
total_data["transport_choices"].setdefault("total_count", 0)
total_data["transport_choices"].setdefault("co2_saved", {})
total_data["transport_choices"].setdefault("burned_calories_walk", 0.0)
total_data["transport_choices"].setdefault("burned_calories_bike", 0.0)
total_data["transport_choices"].setdefault("fuel_cost_saved", {})

# --- Kalkul√°ci√≥ ---
if st.button("üî• Kalkul√°l √©s ment"):

    # Elmentj√ºk az alkalmak √©s t√°vols√°g sz√°m√°t
    total_data["transport_choices"]["total_distance_m"] += transport_distance
    total_data["transport_choices"]["total_count"] += transport_count

    # Kal√≥ria√©get√©s sz√°m√≠t√°sa
    if transport_distance > 0:
        distance_km = transport_distance / 1000
        walk_kcal = 0.9 * user_weight * distance_km
        bike_kcal = 0.4 * user_weight * distance_km

        if transport_type == "Gyalogl√°s":
            total_data["transport_choices"]["burned_calories_walk"] += walk_kcal
            st.success(f"üí™ Ezzel a v√°laszt√°ssal {walk_kcal:.1f} kcal-t √©gett√©l el gyalogl√°ssal.")
        elif transport_type == "Bicikliz√©s":
            total_data["transport_choices"]["burned_calories_bike"] += bike_kcal
            st.success(f"üí™ Ezzel a v√°laszt√°ssal {bike_kcal:.1f} kcal-t √©gett√©l el bicikliz√©ssel.")            

    # CO‚ÇÇ megtakar√≠t√°s sz√°m√≠t√°sa mindig t√∂rt√©nik, f√ºggetlen√ºl a t√°vols√°gt√≥l
    distance_km = transport_distance / 1000
    grams_per_km = CO2_VALUES.get(transport_choice, 0)
    saved_grams = distance_km * grams_per_km

    total_data["transport_choices"]["co2_saved"].setdefault(transport_choice, 0.0)
    total_data["transport_choices"]["co2_saved"][transport_choice] += saved_grams

    # √územanyagk√∂lts√©g megtakar√≠t√°s kisz√°m√≠t√°sa
    fuel_data = FUEL_COSTS.get(transport_choice)

    if fuel_data:
        if transport_choice == "Elektromos":
            consumption_per_km = fuel_data["consumption_kWh_per_100km"] / 100
            fuel_price = fuel_data["price_per_kWh"]
        else:
            consumption_per_km = fuel_data["consumption_l_per_100km"] / 100
            fuel_price = fuel_data["price_per_l"]

        saved_fuel = distance_km * consumption_per_km
        saved_cost = saved_fuel * fuel_price
    else:
        saved_cost = 0
    
    total_data["transport_choices"]["fuel_cost_saved"].setdefault(transport_choice, 0.0)
    total_data["transport_choices"]["fuel_cost_saved"][transport_choice] += saved_cost

    saved_texts = []
    saved_texts.append(f"**{transport_choice}**: {saved_grams:.2f} g CO‚ÇÇ / {saved_cost:.0f} Ft megtakar√≠t√°s")

    st.success("Adatok mentve!")
    if transport_distance > 0:
        st.info("N√©zd meg, h√°ny gramm CO‚ÇÇ-vel k√≠m√©lted meg a bolyg√≥t ezzel a s√©t√°val/bicikliz√©ssel:\n\n" + "\n".join(saved_texts))
    else:
        st.info("N√©zd meg, h√°ny gramm CO‚ÇÇ-vel k√≠m√©lted meg a bolyg√≥t az alternat√≠v k√∂zleked√©s v√°laszt√°s√°val:\n\n" + "\n".join(saved_texts))

    with open("savings.json", "w", encoding="utf-8") as f:
        json.dump(total_data, f, ensure_ascii=False, indent=2)

# --- √ñsszegz√©s ---
st.markdown("---")
st.subheader("üìä √ñsszes√≠tett k√∂rnyezetv√©delmi hat√°s")

st.write(f"√ñsszes gyalogl√°ssal el√©getett kal√≥ria: **{total_data['transport_choices']['burned_calories_walk']:.1f} kcal**")
st.write(f"√ñsszes bicikliz√©ssel el√©getett kal√≥ria: **{total_data['transport_choices']['burned_calories_bike']:.1f} kcal**")

st.write(f"√ñsszes alternat√≠v k√∂zleked√©si alkalmak sz√°ma: **{total_data['transport_choices']['total_count']}**")
st.write(f"√ñsszes megtett t√°vols√°g: **{total_data['transport_choices']['total_distance_m'] / 1000:.2f} km**")

st.write("**Elker√ºlt CO‚ÇÇ kibocs√°t√°s aut√≥t√≠pusonk√©nt:**")
for car, grams in total_data["transport_choices"]["co2_saved"].items():
    if grams > 0:
        st.write(f"- {car}: {grams:.2f} gramm CO‚ÇÇ")

st.write("**√územanyagk√∂lts√©g-megtakar√≠t√°s aut√≥t√≠pusonk√©nt:**")
for car, cost in total_data["transport_choices"]["fuel_cost_saved"].items():
    if cost > 0:
        st.write(f"- {car}: {cost:.0f} Ft")
